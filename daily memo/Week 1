### 1주차 메모

## 2월 11일

2/11 오전

git 기초 검색해서 학습

터미널이 먹통이 될 때 정 안되면 킬 터미널 하고 다시

깃 커밋 치고 i 누르고 글 아무거나 쓰고 insert 눌러서 나가고 : wq 하고 엔터

Cd 너무 하고 데스크톱까지 올라가서 git init 했다가는 컨트롤 범위가 너무 커져버려서 기존에 있던 til 폴더의 것과 충돌함

그래서 파이썬 폴더를 따로 만들어서 작업해줘야 함.

그런데 이런 상황이 만들어졌다? rm -r .git 으로 지워줌. 이건 지워달라는 요청. 지우는 거 무서우면 호출

메세지 수정을 하고 싶으면 어맨드 써서 수정 가능. 웬만하면 사진찍을 땐 심사숙고

책은 5권이 지급될 예정이지만, 강사님은 별로 선호하지 않음. 최신기술을 따라갈 수가 없기 때문. 그래서 웬만하면 인터넷 환경 활용할 것

책에 과하게 의존하지는 않을 것. 혼자 공부하는 머신러닝 딥러닝 정도만. 

깃헙(점유율왕), 깃랩 etc

필기 못따라간거는 깃헙에 DAMF2 업로드 파일 참고

깃 브랜치부터가 하드모드 ON

개인 포트폴리오 사이트 - 스타트 부트스트랩

복사 시에 드래그 노! 트리플 클릭으로 빠뜨리지 않게 복사

내용 바꾸고 싶다? 수정하고 애드하고 커밋하고 푸쉬하는 거 반복이다~

git add . / git commit -m "update" / git push origin master

끝말잇기 순서
A가 깃인잇 깃애드 깃커밋 푸쉬 / B가 깃클론 깃애드 깃커밋

## 2월 12일

막 상세하게 암기할 필요까지는 없으나, 무슨 흐름에 올라타 있는지 정도는 알아야 한다

오늘의 핵심은 브랜치. 마스터 브랜치와 디벨롭 브랜치가 양대산맥.

브랜치를 두고 연습하고 코드를 테스팅하고 하는 일련의 과정의 목적은 결국 마스터 브랜치에 코드를 병합하는 자료가 필요하다

그것이 MERGE 

머지 진행은 웹사이트가 있고 작업 진행중일 때 새 이슈를 처리할 새 브랜치 생성 -> 작업 -> 마스터와 병합

실제 개발상황에서는 브랜치 이름을 로그인으로 정해 놓는 경우가 있음. 왜냐? 작업이 끝났다는 것을 얘기하기도 쉽고 브랜치를 삭제하기 쉬우니까.

브랜치가 여러 가지일 경우 그걸 하나로 합칠 수 있나? 그건 불가능함. 브랜치는 1+1만 가능. 그래서 보통 개발상황에서는 곁가지 브랜치를 합치고

그 다음에 마스터 브랜치로 합치는 것이 순서

기여하는 것

레포지토리에 클로닝 해와서 작업 후 Pull Requests 에서 작업
레포지토리가 다른데 머지를 하는 것임. 우리가 하고 싶은 건 마스터 브랜치에서 마스터 브랜치로 풀 리퀘스트 하는 것

오픈소스로 풀 리퀘스트 받은 것을 머지 풀 리퀘스트 하면 클로즈드가 됨

브랜치 충돌이 일어날 경우는 웹에서도 처리가 가능함. 

결국은 내가 작성한 코드를 제안하는 거고, 타인이 그것을 건드려서 카운터오퍼를 제안하는 게 이 생태계
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
파이썬 시작

수업내용은 파이썬 공식홈페이지에서 파이썬 독스에 설명 다 되어 있음. 거기서 '자습서' 들어가서 활용

유튜브, 블로그 등 다양한 컨텐츠를 소화해야 학습 가능

3장부터가 본격적인 시작. 변수 파트라고 불림. 분기처리

파이썬은 데이터를 트루 혹은 펄스로만 인식

데이터를 처리할 때 규격은 정말 중요하기 때문에, 4장의 if / for / range 등을 활용해서 저장

파이썬 잘못 들어갈 경우 exit 하던지 터미널을 터뜨렸다가 다시 키던지 해야 함. 대소문자 민감하기 때문

앞으로 많은 폴더를 만들 건데, 같은 파이썬을 쓰더라도 툴이 다 다르다. 

주피터 랩을 받아야 하는데, 벤브를 만든 이유는 가상환경 설치를 위해서다. 가상환경은 내부에서만 독립적으로 쓸 수 있게끔 하는 게 목적

일일이 다 쓰려고 하지 말고 확실한 경우 탭 적극적으로 사용해라. 틀릴 위험 줄어든다.

일단 파이선 확장프로그램은 사용하지 않음

주피터랩 단축키는 헬프에서 확인 가능

파이썬은 인터프리터 언어. 컴파일(정보를 통채로 번역하는 것)과 링크 단계가 없음. 실시간으로 번역하는 것. 그렇기 때문에 속도가 다소 느림

float는 실수. 띄어쓰기 관련, 문법 관련 문제는 pep 8 파이썬 개발자 가이드 참조.

스네이크케이스 파스칼 케이스 캐멀 케이스 (띄어쓰기 관련 기준)

수업시간 중에는 가급적 홑따옴표 사용 하지만 혼용해야 하는 경우가 있음.

강조표시를 하고 싶을 때, 쌍따옴표 문장 안에서 강조 표현은 홑따옴표로, 홑따옴표 문장 안에서는 쌍따옴표로 간주. 같은 걸 사용하면 따옴표 사이만 인식

분리하고 싶으면 이스케이프 문자(역슬래시) 사용

파이썬은 마크다운이 아닌 경우의 #을 이해하지 않는다.

divmod는 나눗셈을 하는 도구. a를 b로 나눈 몫과 나눗셈이 세트로 나옴. 그것이 리절트에 저장

비교연산자에서 부등호를 쓸 때 트루/펄스로 나뉨 / == != 뜻 = 같나요? 다른가요?

파이썬에선 연산을 빠르게 하기 위해 단축평가를 하는데 주로 T나 F에서 T는 다음에 나오는 값이 그대로 가고, F는 그냥 F로 감

논리연산 공부 필요... 뇌지컬 필요

코딩은 정확하게 구체적으로 명령할 필요가 있다. 생각을 쪼개서 해야 함

항상 등호(=)의 역할은 오른쪽의 값이 얼마나 길든 상관없이 왼쪽의 값에 저장한다고 생각하라. a = a + b라면 a+b의 값이 a를 덮어씀

파이썬은 숫자와 글자를 같은 공식에서 인식하지 않음. ex) 1 + a , a + 1 불가

==과 is는 비슷한데 쪼금 다름 ==은 값이 같은지, is는 얘들이 본질적으로 같은지 판단(위치까지 같은 것을 판단)
그런데 500은 폴스가 나오는데, 왜 100은 되는가? 256까지는 자주 쓰고 같은 위치에 있으니까 프로그래밍 언어 기준으로 a와 b여도 값이 같으면 같게 판단

일반적으로 모든 데이터는 스트링으로 바꿀 수 있음

따옴표 안에 있는 건 글자로 인식

불리언은 집합체에 데이터가 하나라도 있으면 트루로 인식, 하나도 없으면 폴스로 인식

코드 위아래 꼬이기 시작하면 커널 들어가서 커널 앤 클리어 아웃풋 옵 올셀스 해서 값 날리고 하나씩 다시 할 것

특정 파일만 떼서 올릴거면 깃이그노어.io 들어가기. 거기서 파이썬, 윈도우, 맥오에스 체크


## 2월 13일

